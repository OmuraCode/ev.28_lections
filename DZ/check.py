# people = {
#   'Murat': 14,
#   'Erjan': 21,
#   'Karina': 24,
#   'Altynay': 17,
#   'Aibek': 16
# }
# ls = []
# for k, v in people.items():
#   if v >= 17:
#     print (f'{k} Вход в ночной клуб разрешен!')
#   else:
#     print(f'{k} Вход воспрещен')





# Дан словарь а, значениями которого являются словари,
# измените словарь 'а' таким образом, чтобы значения внутреннего словаря стали 
# внешними значениями

# a = {'a': {'e': 32}, 'b': {'f': 36}, 'c': {'j': 37}, 'd': {'h': 21}}

# Вывод:
# {'a': 32, 'b': 36, 'c': 37, 'd': 21}


# a = {
#     'a': {'e': 32},
#     'b': {'f': 36},
#     'c': {'j': 37}, 
#     'd': {'h': 21}
#     }
# for k, v in a.items():
#     v.update 






# Создайте словарь, где ключами будут фрукты, а значением их цены. 
# Удалите те элементы, значение которых будет чётным.



# a = {
#     'apple' : 12,
#     'pineapple': 87,
#     'orange': 66,
#     'cherry': 37,

# }
# for k, v in a.items():
#     if v % 2 != 0:
#         print(k, v)


# Создайте словарь, где значениями будут являться числа. Найдите сумму этих значений.


# dict_ = {
#     'one' : 1,
#     'two' : 2,
#     'nine': 9,
#     'twelv' : 12,
#     'twenty one': 21
# }
# for k, v in dict_.items():
#     res = (v + v)
#     print(res)





# 5) Создайте словарь из чисел от 1 до 10, где ключами будут сами числа, а значениями их квадраты.


# dict_ = {
#     1 : (pow(1, 2)),
#     2 : (pow(2, 2)),
#     3 : (pow(3, 2)),
#     4 : (pow(4, 2)),
#     5 : (pow(5, 2)),
#     6: (pow(6, 2)),
#     7: (pow(7, 2)),
#     8: (pow(8, 2)),
#     9: (pow(9, 2)),
#     10: (pow(10, 2))
# }
# print(dict_)






# Дан словарь, значениями в котором являются другие словари. Замените внутренние словари 
# их значениями. Например: my_dict = {'first': {'a': 1}, 'second': {'b': 2}} -> {'first': 1, 'second': 2}


# my_dict = {
#     'first': {'a': 1}, 
#     'second': {'b': 2}
#     }
# for k, v in my_dict:



# Дан словарь Дан словарь dict_. Отсортируйте словарь по значениям в порядке уменьшения.
# Новые элементы занесите в словарь sorted_dict

# dict_ = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
# sorted_dict = {}


# dict_ = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
# sorted_dict = sorted(dict_)
# print(sorted_dict)



# Запросите у пользователя сумму, которая у него сейчас есть в бумажнике. Если он введёт сумму,
# меньшую чем 0, 
# то запринтите исключение с текстом "Сумма не может быть отрицательной!"

# sum_ = int(input('Сколько у вас денег в бумажнике: '))
# if sum_ < 0:
#     print('Сумма не может быть отрицательной')
# elif sum_ == 0:
#     print('Возвращайтесь снова с деньгами')
# else:
#     print('Отдайте их первому встречному человеку')













# __________________________________________
# Check yourself week3
# 2) Дан словарь а, значениями которого являются словари,
# измените словарь 'а' таким образом, чтобы значения внутреннего словаря стали 
# внешними значениями

# a = {'a': {'e': 32}, 'b': {'f': 36}, 'c': {'j': 37}, 'd': {'h': 21}}

# Вывод:
# {'a': 32, 'b': 36, 'c': 37, 'd': 21}

# ОТВЕТ
# 2 zadanie

# a = {'a': {'e': 32}, 'b': {'f': 36}, 'c': {'j': 37}, 'd': {'h': 21}}
# b = {}
# for k ,v in a.items(): # a['a]-> i -> {'e': 32}
#     for i_in, j_n in v.items():
#         b[k] = j_n
# print(b)


# 3 ZADANIYE

# a = {
#     'apple' : 12,
#     'pineapple': 87,
#     'orange': 66,
#     'cherry': 37,

# }
# for i in a.copy():
#     print(a[i]) #
#     if a[i] % 2 != 0:
#         a.pop(i)
# print(a)





# 4 zadanie

# dict_ = {
#     'one' : 1,
#     'two' : 2,
#     'nine': 9,
#     'twelv' : 12,
#     'twenty one': 21
# }
# total = 0
# for i in dict_.values():
#     total += i
# print(total)


# 5 ) Создайте словарь из чисел от 1 до 10, где ключами будут сами числа, а значениями их квадраты.

# dict_ = {}

# for i in range(1,10):
#     dict_[i] = i**2
# print(dict_)




# 7) Дан словарь dict_. Отсортируйте словарь по значениям в порядке уменьшения.
# Новые элементы занесите в словарь sorted_dict

# dict_ = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
# sorted_ = sorted(dict_.values())
# sorted_dict = {}
# print(sorted_) # [0,1,2,3,4,]
# for i in sorted_:
#     for key, value in dict_.items():
#         if value == i:
#             sorted_dict[key] = value
#             break
# print(sorted_dict)





# ________________________________________




"""
1) Создайте список list_ из нечётных целых чисел в промежутке от 1 
до 50. Нужно использовать comprehension.
"""

# list_ = [x for x in range(1, 51) if x % 2 > 0]
# print(list_)




"""
2) Создайте список list_ из квадратов всех чисел от 1 до 25 
(включительно). Нужно использовать comprehension.
"""

# list_ = [x**2 for x in range(1, 26)]
# print(list_)

"""
3) Опишите полный синтаксис конструкции try-except
"""

# try:
#     <body>
# except:
#     <body>


"""
4) Напишите программу, которая будет получать через input 2 числа num1, num2 и будет печатать их сумму.
Обработайте ошибку, которая возникнет, если пользователь введёт что-то кроме числа и выведите сообщение, например:
Введите число!
# """

# num1 = int(input('Vvedite chislo 1: '))
# num2 = int(input('Vvedite chislo 2: '))
# try:
#     res = num1 * num2
#     print(res)
# except:
#         print('Введите число!')
# print(res)



"""
5) Создайте функцию divide() которая должна принимать 2 числа и возвращать результат их деления.
"""
# def divide(num1, num2):
#     res = num1 / num2
#     print(res)

# print(divide(98, 2))






"""
6) Создайте функцию:

is_palindrome() 
которая будет принимать строку и проверить является ли она палиндромом.

Палиндро́м, пе́ревертень — число, буквосочетание, слово или текст, одинаково читающееся в обоих направлениях. Например, число 101; слова "кок", "топот", "комок" и т.д.

Функция должна возвращать True или False. Нужно учитывать пробелы и регистр 
"""


# def is_palindrome(str1):
#     if str1[:] == str1[::-1]:
#         print (True)
#     else:
#         # str1[:] != str1[::-1]:
#         print (False)
# is_palindrome("Popop")


# def is_palindrome(x):
#     if x[:] == x[::-1]:
#         print (True)
#     else:
#         print (False)
# is_palindrome('rer')

# def is_palindrome(x):
#     if x[:] == x[::-1]:
#         return True
#     else:
#         return False
# print(is_palindrome('rer'))

# def is_palindr


# def is_palindrome(str1):
#     if x[:] == x[::-1]:
#         return True
#     else:
#         return False
# print(is_palindrome('довод'))




# _______________________________________________________


# CHECK YS 5

"""
1) Создайте функцию, которая будет принимать 2 числа, складывать их и возвращать результат сложения.
"""

# def slojeniye(x, y):
#     res = x + y
#     return res
# print(slojeniye(3,4))

"""
2) Создайте функцию, которая принимает два обязательных параметра. Задача этой функции выводить тип принятых аргументов.
"""
# def type_(type1, type2):
#     return type(type1), type(type2)
# print(type_(112, '2'))

"""
3) Напишите функцию, которая принимает список чисел и возвращает их произведение.
"""

# def my_func(num1, num2, num3, num4):
#     res = num1 * num2 * num3 * num4
#     return res
# print(my_func(1,2,3,4))

"""
4) Напишите функцию, которая принимает строку и выводит количество гласных, 
согласных букв и остальных символов. Используйте только кириллические символы
"""

glasnye = 'АЕЁИОУЫЭЮЯ'.lower()
soglasnye = 'БВГДЖЗЙКЛМНПРСТФХЧЦШЩ'.lower()

def let_count(word: str):
    res_sogl = 0
    res_glas = 0
    res_another = 0
    for letter in word:
        if letter in soglasnye:
            res_sogl +=1
        elif letter in glasnye:
            res_glas +=1
        else:
            res_another +=1
    return res_glas, res_sogl, res_another
print(let_count('рпивет '))



"""
6) Дана глобальная переменная num со значением 3. Напишите функцию mul которая 
будет возвращать квадрат этой переменной и записывать результат в глобальную переменную num. 
Вызовите функцию три раза, и распечатайте переменную num.
"""

# num = 3
# def mul(num):
#     num = num ** 2
#     return num
# print(mul(num))
# print(mul(num))
# print(mul(num))
# print(num)
# # print(num)



"""
7) Есть глобальная переменная, которая обозначает размер самой главной первой матрешки. 
Напишите функцию, в которой к размеру главной матрешки прибавляется размер второй матрешки, 
который определен в этой функции. То же самое сделайте и с третьей функцией внутри второй. Верните результат сложения.
"""


# first_size = 100
# def second():
#     second_size = 50
#     global first_size
#     first_size += second_size
#     def third():
#         third_size = 25
#         global first_size
#         first_size +=third_size
#     third()

# second()
# print(first_size)


"""
8) Cоздайте переменную list_ и сохраните в ней список из чисел. Создайте новый список, 
используя встроенные функции, состоящий из квадратов этих чисел, результат сохраните 
в новой переменной result и выведите в консоль.

Обязатьльно нужно использовать builtin functions
"""

# list_ = [1,2,3,4,5]
# list2 = []
# result = map(lambda x: x ** 2 for x in list_, list_)
# print(result)



